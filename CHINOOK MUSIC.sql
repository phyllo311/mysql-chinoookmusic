USE CHINOOK;

CREATE TEMPORARY TABLE CUSTOMER_SPENDING
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, C.COUNTRY AS CUSTOMER_COUNTRY, C.CITY AS CUSTOMER_CITY, C.EMAIL AS CUSTOMER_EMAIL,
I. INVOICEID AS INVOICE, I.TOTAL, INL.TRACKID, INL.UNITPRICE, INL.QUANTITY,
T.NAME AS TRACK_NAME, T.ALBUMID, T.GENREID, T.COMPOSER,
G.NAME AS GENRE_NAME
FROM CUSTOMER C
INNER JOIN INVOICE I ON I.CUSTOMERID = C.CUSTOMERID
INNER JOIN INVOICELINE INL ON INL.INVOICEID = I.INVOICEID
INNER JOIN TRACK T ON T.TRACKID = INL.TRACKID
INNER JOIN GENRE G ON G.GENREID = T.GENREID;

SELECT * FROM CUSTOMER_SPENDING;

-- 1. WHICH CITY HAS BEST CUSTOMERS? RETURN 1 CITY WHERE INVOICE TOTAL IS THE HIGHEST
SELECT BillingCity, SUM(Total)
FROM invoice
GROUP BY 1
ORDER BY 2 DESC
Limit 1;

-- 2. CUSTOMER WHO SPENT THE MOST
-- USING JOIN
SELECT c.Customerid, c.FirstName, c.LastName, SUM(i.Total) AS Total_spent
FROM Customer c
INNER JOIN invoice I ON c.Customerid = i.Customerid
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

-- USING WHERE
SELECT c.Customerid, c.FirstName, c.LastName, SUM(i.Total) AS Total_spent
FROM Customer c, invoice i
WHERE c.Customerid = i.Customerid
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

-- 3. 1. Return the email, first name, last name, Genre of all Rock Music listeners. Return your list ordered alphabetically by email address starting with A.
SELECT DISTINCT C.FIRSTNAME, C.LASTNAME, C.EMAIL, G.NAME
FROM CUSTOMER C
INNER JOIN INVOICE I ON I.CUSTOMERID = C.CUSTOMERID
INNER JOIN INVOICELINE INL ON INL.INVOICEID = I.INVOICEID
INNER JOIN TRACK T ON T.TRACKID = INL.TRACKID
INNER JOIN GENRE G ON G.GENREID = T.GENREID
WHERE G.NAME = 'Rock' AND C.EMAIL LIKE 'A%'
ORDER BY 3;

-- USING TEMPORARY TABLE CUSTOMER_SPENDING
SELECT DISTINCT FIRSTNAME, LASTNAME, CUSTOMER_EMAIL, GENRE_NAME
FROM CUSTOMER_SPENDING
WHERE GENRE_NAME = 'Rock' AND CUSTOMER_EMAIL LIKE 'A%'
order by 3;

-- 4. WHO IS WRITING ROCK MUSIC?
SELECT T.Composer, G.Name AS GENRE, A.NAME AS ARTIST_NAME
FROM Track T, Genre G, ALBUM AL, ARTIST A
WHERE T.GenreId = G.GenreId 
AND AL.ALBUMID = T.ALBUMID
AND A.ARTISTID = AL.ARTISTID
AND G.Name = 'Rock';

-- 5. WHICH ARTIST EARNED THE MOST? WHICH PURCHASER SPEND THE MOST ON THIS ARTIST?
-- STEP 1: CALCULATE TOTAL SPENDING FOR TRACKID
-- STEP 2: FIND THE ARTIST THAT THAT MOST-SPEMT TRACKID
-- STEP 3: FIND CUSTOMER WHO SPENT MOST ON THAT ARTIST

WITH PAY_PER_ARTIST AS ( -- CREATE CTE TO QUERY THE MOST PAID ARTIST
SELECT DISTINCT 
A.NAME AS ARTIST_NAME, -- SELECT ARTIST NAME FROM ARTIST TABLE
INL.INVOICEID, INL.TRACKID, -- SELECT DATA FROM INVOICELINE TABLE
SUM(INL.UNITPRICE * INL.QUANTITY) AS TOTAL_PAYMT, -- CALCULATE TOTAL PURCHASES FROM invoiceline TABLE
RANK() OVER(ORDER BY SUM(INL.UNITPRICE * INL.QUANTITY) DESC) AS RANKING -- RANK THE ARTIST BY TOTAL PURCHASES
FROM INVOICELINE INL, TRACK T, ALBUM AL, ARTIST A -- MERGE TABLES
WHERE INL.TRACKID = T.TRACKID
AND T.ALBUMID = AL.ALBUMID
AND AL.ARTISTID = A.ARTISTID
GROUP BY 1)
SELECT DISTINCT A.NAME AS ARTIST,
C.CUSTOMERID, CONCAT(C.FIRSTNAME, '', C.LASTNAME) AS CUSTOMER,
SUM(IL.UNITPRICE) AS PRICE
FROM CUSTOMER C -- CALCULATE CUSTOMER PURCHASES FOR EACH ARTIST
JOIN INVOICE I ON C.CUSTOMERID = I.CUSTOMERID -- MERGE WITH OTHER TABLES, UPTO ARTIST TABLE
JOIN INVOICELINE IL ON I.INVOICEID = IL.INVOICEID
JOIN TRACK T ON IL.TRACKID = T.TRACKID
JOIN ALBUM AL ON T.ALBUMID = AL.ALBUMID
JOIN ARTIST A ON AL.ARTISTID = A.ARTISTID
WHERE A.NAME = (SELECT ARTIST_NAME FROM PAY_PER_ARTIST WHERE RANKING = 1) -- CALL ARTIST THAT PAID THE MOST FROM CTE USING SUBQ
GROUP BY 1,2,3
ORDER BY 4 DESC;
  
 -- optimize with temporary table 
 WITH PAY_PER_ARTIST AS ( -- CREATE CTE TO QUERY THE MOST PAID ARTIST
SELECT DISTINCT 
A.NAME AS ARTIST_NAME, -- SELECT ARTIST NAME FROM ARTIST TABLE
INL.INVOICEID, INL.TRACKID, -- SELECT DATA FROM INVOICELINE TABLE
SUM(INL.UNITPRICE * INL.QUANTITY) AS TOTAL_PAYMT, -- CALCULATE TOTAL PURCHASES FROM invoiceline TABLE
RANK() OVER(ORDER BY SUM(INL.UNITPRICE * INL.QUANTITY) DESC) AS RANKING -- RANK THE ARTIST BY TOTAL PURCHASES
FROM INVOICELINE INL, TRACK T, ALBUM AL, ARTIST A -- MERGE TABLES
WHERE INL.TRACKID = T.TRACKID
AND T.ALBUMID = AL.ALBUMID
AND AL.ARTISTID = A.ARTISTID
GROUP BY 1)
SELECT DISTINCT A.NAME AS ARTIST,
CP.CUSTOMERID, CONCAT(CP.FIRSTNAME, '', CP.LASTNAME) AS CUSTOMER,
SUM(CP.UNITPRICE) AS PRICE
FROM CUSTOMER_SPENDING CP -- USE TEMPORARY TABLE
JOIN ALBUM AL ON CP.ALBUMID = AL.ALBUMID -- MERGE WITH RELEVANT TABLES
JOIN ARTIST A ON AL.ARTISTID = A.ARTISTID
WHERE A.NAME = (SELECT ARTIST_NAME FROM PAY_PER_ARTIST WHERE RANKING = 1) -- CALL ARTIST THAT PAID THE MOST FROM CTE
GROUP BY 1,2,3
ORDER BY 4 DESC; 
  
  
   
-- 6. Count how many songs base on genre does customer 12 bought
SELECT G.NAME AS GENRE_NAME, COUNT(INL.TRACKID) AS NUMBER_SONGS
FROM INVOICELINE INL, TRACK T, GENRE G
WHERE T.TRACKID = INL.TRACKID
AND G.GENREID = T.GENREID
AND INL.INVOICEID IN (SELECT DISTINCT INVOICEID FROM INVOICE 
WHERE (CUSTOMERID = 12))
GROUP BY 1;

-- USE TEMPORARY TABLE CUSTOMER_SPENDING
SELECT GENRE_NAME, COUNT(TRACKID) AS NUMBER_SONGS
FROM CUSTOMER_SPENDING
WHERE CUSTOMERID = 12
GROUP BY 1
ORDER BY 2;

-- HOW MUCH DID AMERICANS SPENT TOTAL?
SELECT * FROM CUSTOMER_SPENDING;
SELECT SUM(TOTAL) AS TOTAL_SPENDING
FROM CUSTOMER_SPENDING
WHERE CUSTOMER_COUNTRY = 'USA';

-- WHAT ARE THE MOST MUSIC GENRE FOR EACH COUNTRY
SELECT * FROM CUSTOMER_SPENDING;

-- NUMBER OF INVOICES AND MONEY SPENT IN EACH COUNTRY?
SELECT CUSTOMER_COUNTRY, COUNT(INVOICE) AS NUMBER_OF_INVOICE, SUM(TOTAL) AS TOTAL_SPENDING
FROM CUSTOMER_SPENDING
GROUP BY 1
ORDER BY 2 DESC;

-- MOST POPULAR MUSIC GENRES PER COUNTRY
SELECT  CUSTOMER_COUNTRY AS COUNTRY, GENRE_NAME,
SUM(UNITPRICE * QUANTITY) AS TOTAL_SPENDING, COUNT(QUANTITY) AS TIMES_PURCHASES,
RANK () OVER(PARTITION BY CUSTOMER_COUNTRY ORDER BY COUNT(QUANTITY) DESC) AS RANK_PURCHASES
FROM CUSTOMER_SPENDING
GROUP BY 1,2
ORDER BY 3 DESC;

-- HOW MANY TIMES THE TRACK IS BOUGHT MONTHLY?
-- STEP 1: EXTRACT INVOICE YEAR AND MONHTH
-- STEP 2: COUNT QUANTITY INVOICE BY TRACKID

-- create pivot table for customer segmentation based on their total purchases